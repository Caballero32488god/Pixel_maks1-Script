for _, portal in pairs(game:GetDescendants()) do
	if portal.Name == "RobloxForwardPortals" then
		portal:Destroy()
	end
end

game.DescendantAdded:Connect(function(descendant)
	if descendant.Name == "RobloxForwardPortals" then
		descendant:Destroy()
	end
end)

print("")

local VirtualUser = game:GetService('VirtualUser')
game:GetService('Players').LocalPlayer.Idled:Connect(function()
	VirtualUser:CaptureController()
	VirtualUser:ClickButton2(Vector2.new())
end)
print("")

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")

local LP = Players.LocalPlayer

local killingConnection
_G.fastHitActive = false
local whitelist = {}
local isHitting = false

game:GetService("Players").LocalPlayer.Idled:Connect(function()
	game:GetService("VirtualUser"):CaptureController()
	game:GetService("VirtualUser"):ClickButton1(Vector2.new())
	game:GetService("VirtualUser"):ClickButton2(Vector2.new())
end)

local GuiVisible = true

local parts = {}
local partSize = 2048
local totalDistance = 50000
local startPosition = Vector3.new(-2, - 9.5, -2)
local numberOfParts = math.ceil(totalDistance / partSize)
local rockOriginal
local rockSize
local rockConnection


local function createParts()
	for x = 0, numberOfParts - 1 do
		for z = 0, numberOfParts - 1 do
			local newPartSide = Instance.new("Part")
			newPartSide.Size = Vector3.new(partSize, 1, partSize)
			newPartSide.Position = startPosition + Vector3.new(x * partSize, 0, z * partSize)
			newPartSide.Anchored = true
			newPartSide.Transparency = 1
			newPartSide.CanCollide = true
			newPartSide.Name = "Part_Side_" .. x .. "_" .. z
			newPartSide.Parent = workspace
			table.insert(parts, newPartSide)
			local newPartLeftRight = Instance.new("Part")
			newPartLeftRight.Size = Vector3.new(partSize, 1, partSize)
			newPartLeftRight.Position = startPosition + Vector3.new(- x * partSize, 0, z * partSize)
			newPartLeftRight.Anchored = true
			newPartLeftRight.Transparency = 1
			newPartLeftRight.CanCollide = true
			newPartLeftRight.Name = "Part_LeftRight_" .. x .. "_" .. z
			newPartLeftRight.Parent = workspace
			table.insert(parts, newPartLeftRight)
			local newPartUpLeft = Instance.new("Part")
			newPartUpLeft.Size = Vector3.new(partSize, 1, partSize)
			newPartUpLeft.Position = startPosition + Vector3.new(- x * partSize, 0, - z * partSize)
			newPartUpLeft.Anchored = true
			newPartUpLeft.Transparency = 1
			newPartUpLeft.CanCollide = true
			newPartUpLeft.Name = "Part_UpLeft_" .. x .. "_" .. z
			newPartUpLeft.Parent = workspace
			table.insert(parts, newPartUpLeft)
			local newPartUpRight = Instance.new("Part")
			newPartUpRight.Size = Vector3.new(partSize, 1, partSize)
			newPartUpRight.Position = startPosition + Vector3.new(x * partSize, 0, - z * partSize)
			newPartUpRight.Anchored = true
			newPartUpRight.Transparency = 1
			newPartUpRight.CanCollide = true
			newPartUpRight.Name = "Part_UpRight_" .. x .. "_" .. z
			newPartUpRight.Parent = workspace
			table.insert(parts, newPartUpRight)
		end
	end
end

local function makePartsWalkthrough()
	for _, part in ipairs(parts) do
		if part and part.Parent then
			part.CanCollide = false
		end
	end
end

local function makePartsSolid()
	for _, part in ipairs(parts) do
		if part and part.Parent then
			part.CanCollide = true
		end
	end
end

local Library = loadstring(game:HttpGetAsync("https://github.com/ActualMasterOogway/Fluent-Renewed/releases/latest/download/Fluent.luau"))()
local SaveManager = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/ActualMasterOogway/Fluent-Renewed/master/Addons/SaveManager.luau"))()
local InterfaceManager = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/ActualMasterOogway/Fluent-Renewed/master/Addons/InterfaceManager.luau"))()
local Window = Library:CreateWindow{
	Title = "-215545009",
	SubTitle = "Let Get Top 1!",
	TabWidth = 125,
	Size = UDim2.fromOffset(830, 525),
	Resize = true,
	MinSize = Vector2.new(470, 380),
	Acrylic = true,
	Theme = "VSC Dark High Contrast",
	MinimizeKey = Enum.KeyCode.RightControl
}

local Tabs = {
	Main = Window:CreateTab{
		Title = "Principal",
		Icon = "phosphor-house-bold"
	},
	AutoFarm = Window:CreateTab{
		Title = "Quinta De Carros",
		Icon = "phosphor-robot-bold"
	},
	Rebirth = Window:CreateTab{
		Title = "Renascimento",
		Icon = "phosphor-arrows-clockwise-bold"
	},
	Killer = Window:CreateTab{
		Title = "Assassino",
		Icon = "phosphor-sword-bold"
	},
	Crystals = Window:CreateTab{
		Title = "Cristais",
		Icon = "phosphor-diamond-bold"
	},
	Teleport = Window:CreateTab{
		Title = "Teleporte",
		Icon = "phosphor-dog-bold"
	},
	Stats = Window:CreateTab{
		Title = "Estatísticas",
		Icon = "phosphor-sparkle-bold"
	},
	Misc = Window:CreateTab{
		Title = "Diversos",
		Icon = "phosphor-map-pin-bold"
	},
	Settings = Window:CreateTab{
		Title = "Configurações",
		Icon = "phosphor-sliders-bold"
	}
}
local Options = Library.Options  

local MainSection = Tabs.Main:CreateSection("Basic Controls")

local selectedSize = "2"

local Input = Tabs.Main:CreateInput("SizeChanger", {
	Title = "Trocador de tamanho",
	Description = "Introduza o tamanho",
	Default = "2",
	Placeholder = "",
	Numeric = true,
	Finished = true,
	Callback = function(Value)
		selectedSize = Value
		if _G.AutoSize then
			game:GetService("ReplicatedStorage").rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", tonumber(selectedSize))
		end
	end
})

local Toggle = Tabs.Main:CreateToggle("AutoSize", {
	Title = "Tamanho de configuração automática",
	Description = "",
	Default = false,
	Callback = function(Value)
		_G.AutoSize = Value
		while _G.AutoSize do
			game:GetService("ReplicatedStorage").rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", tonumber(selectedSize))
			task.wait(0.1)
		end
	end
})

local selectedSpeed = "125"

local Input = Tabs.Main:CreateInput("SpeedChanger", {
	Title = "Trocador de velocidade",
	Description = "",
	Default = "125",
	Placeholder = "",
	Numeric = true,
	Finished = true,
	Callback = function(Value)
		selectedSpeed = Value
		if _G.AutoSpeed then
			if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
				game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = tonumber(selectedSpeed)
			end
		end
	end
})

local Toggle = Tabs.Main:CreateToggle("AutoSpeed", {
	Title = "Trocador automático de velocidade",
	Description = "",
	Default = false,
	Callback = function(Value)
		_G.AutoSpeed = Value
		while _G.AutoSpeed do
			if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
				game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = tonumber(selectedSpeed)
			end
			task.wait()
		end
	end
})

game.Players.LocalPlayer.CharacterAdded:Connect(function(char)
	if _G.AutoSpeed then
		local humanoid = char:WaitForChild("Humanoid")
		humanoid.WalkSpeed = tonumber(selectedSpeed)
	end
end)

Tabs.Main:CreateButton{
	Title = "Passe de jogo AutoLift grátis",
	Callback = function()
		local gamepassFolder = game:GetService("ReplicatedStorage").gamepassIds
		local player = game:GetService("Players").LocalPlayer
		for _, gamepass in pairs(gamepassFolder:GetChildren()) do
			local value = Instance.new("IntValue")
			value.Name = gamepass.Name
			value.Value = gamepass.Value
			value.Parent = player.ownedGamepasses
		end
	end
}

local Toggle = Tabs.Main:CreateToggle("WalkOnWater", {
	Title = "andar sobre a água",
	Description = "",
	Default = false,
	Callback = function(Value)
		if Value then
			createParts()
		else
			makePartsWalkthrough()
		end
	end
})

local letterMap = {
	a = "ạ̲",
	b = "ḅ̲",
	c = "с̲",
	d = "ḍ̲",
	e = "ẹ̲",
	f = "f̲",
	g = "ɡ̲",
	h = "ḥ̲",
	i = "ị̲",
	j = "ј̲",
	k = "ḳ̲",
	l = "ḷ̲",
	m = "ṃ̲",
	n = "ṇ̲",
	o = "ọ̲",
	p = "р̲",
	q = "q̲",
	r = "ṛ̲",
	s = "ṣ̲",
	t = "ṭ̲",
	u = "ụ̲",
	v = "ṿ̲",
	w = "ẉ̲",
	x = "х̲",
	y = "ỵ̲",
	z = "ẓ̲"
}

local InputValue = ""
local SpecialInput = Tabs.Main:CreateInput("SpecialChat", {
	Title = "Saltar bate papo",
	Default = "Funciona mas um pouco",
	Placeholder = "",
	Finished = true,
	Callback = function(Value)
		InputValue = Value
		local convertedText = Value:lower():gsub(".", letterMap)
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(convertedText, "All")
	end
})

local Toggle = Tabs.AutoFarm:CreateToggle("Weight", {
	Title = "Peso automático",
	Description = "",
	Default = false,
	Callback = function(Value)
		_G.AutoWeight = Value
		if Value then
			local weightTool = game.Players.LocalPlayer.Backpack:FindFirstChild("Weight")
			if weightTool then
				game.Players.LocalPlayer.Character.Humanoid:EquipTool(weightTool)
			end
		else
			local character = game.Players.LocalPlayer.Character
			local equipped = character:FindFirstChild("Weight")
			if equipped then
				equipped.Parent = game.Players.LocalPlayer.Backpack
			end
		end
		while _G.AutoWeight do
			game:GetService("Players").LocalPlayer.muscleEvent:FireServer("rep")
			task.wait(0.1)
		end
	end
})

local Toggle = Tabs.AutoFarm:CreateToggle("Pushups", {
	Title = "Flexões automáticas",
	Description = "",
	Default = false,
	Callback = function(Value)
		_G.AutoPushups = Value
		if Value then
			local pushupsTool = game.Players.LocalPlayer.Backpack:FindFirstChild("Pushups")
			if pushupsTool then
				game.Players.LocalPlayer.Character.Humanoid:EquipTool(pushupsTool)
			end
		else
			local character = game.Players.LocalPlayer.Character
			local equipped = character:FindFirstChild("Pushups")
			if equipped then
				equipped.Parent = game.Players.LocalPlayer.Backpack
			end
		end
		while _G.AutoPushups do
			game:GetService("Players").LocalPlayer.muscleEvent:FireServer("rep")
			task.wait(0.1)
		end
	end
})

local Toggle = Tabs.AutoFarm:CreateToggle("Handstands", {
	Title = "Parada de mão automática",
	Description = "",
	Default = false,
	Callback = function(Value)
		_G.AutoHandstands = Value
		if Value then
			local handstandsTool = game.Players.LocalPlayer.Backpack:FindFirstChild("Handstands")
			if handstandsTool then
				game.Players.LocalPlayer.Character.Humanoid:EquipTool(handstandsTool)
			end
		else
			local character = game.Players.LocalPlayer.Character
			local equipped = character:FindFirstChild("Handstands")
			if equipped then
				equipped.Parent = game.Players.LocalPlayer.Backpack
			end
		end
		while _G.AutoHandstands do
			game:GetService("Players").LocalPlayer.muscleEvent:FireServer("rep")
			task.wait(0.1)
		end
	end
})

local Toggle = Tabs.AutoFarm:CreateToggle("Situps", {
	Title = "Abdominais automáticos",
	Description = "",
	Default = false,
	Callback = function(Value)
		_G.AutoSitups = Value
		if Value then
			local situpsTool = game.Players.LocalPlayer.Backpack:FindFirstChild("Situps")
			if situpsTool then
				game.Players.LocalPlayer.Character.Humanoid:EquipTool(situpsTool)
			end
		else
			local character = game.Players.LocalPlayer.Character
			local equipped = character:FindFirstChild("Situps")
			if equipped then
				equipped.Parent = game.Players.LocalPlayer.Backpack
			end
		end
		while _G.AutoSitups do
			game:GetService("Players").LocalPlayer.muscleEvent:FireServer("rep")
			task.wait(0.1)
		end
	end
})

local Toggle = Tabs.AutoFarm:CreateToggle("Punch", {
	Title = "Soco automático",
	Description = "",
	Default = false,
	Callback = function(Value)
		_G.fastHitActive = Value
		if Value then
			local function equipAndModifyPunch()
				while _G.fastHitActive do
					local player = game.Players.LocalPlayer
					local punch = player.Backpack:FindFirstChild("Punch")
					if punch then
						punch.Parent = player.Character
						if punch:FindFirstChild("attackTime") then
							punch.attackTime.Value = 0
						end
					end
					wait(0.1)
				end
			end
			local function rapidPunch()
				while _G.fastHitActive do
					local player = game.Players.LocalPlayer
					player.muscleEvent:FireServer("punch", "rightHand")
					player.muscleEvent:FireServer("punch", "leftHand")
					local character = player.Character
					if character then
						local punchTool = character:FindFirstChild("Punch")
						if punchTool then
							punchTool:Activate()
						end
					end
					wait(0.1)
				end
			end
			coroutine.wrap(equipAndModifyPunch)()
			coroutine.wrap(rapidPunch)()
		else
			local character = game.Players.LocalPlayer.Character
			local equipped = character:FindFirstChild("Punch")
			if equipped then
				equipped.Parent = game.Players.LocalPlayer.Backpack
			end
		end
	end
})

local Toggle = Tabs.AutoFarm:CreateToggle("ToolSpeed", {
	Title = "Ferramentas rápidas",
	Description = "",
	Default = false,
	Callback = function(Value)
		_G.FastTools = Value
		local defaultSpeeds = {
			{
				"Punch",
				"attackTime",
				Value and 0 or 0.35
			},
			{
				"Ground Slam",
				"attackTime",
				Value and 0 or 6
			},
			{
				"Stomp",
				"attackTime",
				Value and 0 or 7
			},
			{
				"Handstands",
				"repTime",
				Value and 0 or 1
			},
			{
				"Pushups",
				"repTime",
				Value and 0 or 1
			},
			{
				"Weight",
				"repTime",
				Value and 0 or 1
			},
			{
				"Situps",
				"repTime",
				Value and 0 or 1
			}
		}
		local player = game.Players.LocalPlayer
		local backpack = player:WaitForChild("Backpack")
		for _, toolInfo in ipairs(defaultSpeeds) do
			local tool = backpack:FindFirstChild(toolInfo[1])
			if tool and tool:FindFirstChild(toolInfo[2]) then
				tool[toolInfo[2]].Value = toolInfo[3]
			end
			local equippedTool = player.Character and player.Character:FindFirstChild(toolInfo[1])
			if equippedTool and equippedTool:FindFirstChild(toolInfo[2]) then
				equippedTool[toolInfo[2]].Value = toolInfo[3]
			end
		end
	end
})

local RockSection = Tabs.AutoFarm:CreateSection("Fazenda de Pedras")

local selectrock = ""

local Toggle = Tabs.AutoFarm:CreateToggle("TinyIslandRock", {
	Title = "Pedra Pequena",
	Description = "",
	Default = false,
	Callback = function(Value)
		selectrock = "Tiny Island Rock"
		getgenv().autoFarm = Value
		while getgenv().autoFarm do
			task.wait()
			if game:GetService("Players").LocalPlayer.Durability.Value >= 0 then
				for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
					if v.Name == "neededDurability" and v.Value == 0 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
						gettool()
					end
				end
			end
		end
	end
})

local Toggle = Tabs.AutoFarm:CreateToggle("StarterIslandRock", {
	Title = "Pedra Inicial",
	Description = "",
	Default = false,
	Callback = function(Value)
		selectrock = "Starter Island Rock"
		getgenv().autoFarm = Value
		while getgenv().autoFarm do
			task.wait()
			if game:GetService("Players").LocalPlayer.Durability.Value >= 100 then
				for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
					if v.Name == "neededDurability" and v.Value == 100 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
						gettool()
					end
				end
			end
		end
	end
})

local Toggle = Tabs.AutoFarm:CreateToggle("LegendBeachRock", {
	Title = "Pedra Dourada",
	Description = "",
	Default = false,
	Callback = function(Value)
		selectrock = "Legend Beach Rock"
		getgenv().autoFarm = Value
		while getgenv().autoFarm do
			task.wait()
			if game:GetService("Players").LocalPlayer.Durability.Value >= 5000 then
				for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
					if v.Name == "neededDurability" and v.Value == 5000 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
						gettool()
					end
				end
			end
		end
	end
})

function gettool()
	for i, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
		if v.Name == "Punch" and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
			game.Players.LocalPlayer.Character.Humanoid:EquipTool(v)
		end
	end
	game:GetService("Players").LocalPlayer.muscleEvent:FireServer("punch", "leftHand")
	game:GetService("Players").LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
end

local Toggle = Tabs.AutoFarm:CreateToggle("FrostGymRock", {
	Title = "Pedra Gelada",
	Description = "",
	Default = false,
	Callback = function(Value)
		selectrock = "Frost Gym Rock"
		getgenv().autoFarm = Value
		while getgenv().autoFarm do
			task.wait()
			if game:GetService("Players").LocalPlayer.Durability.Value >= 150000 then
				for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
					if v.Name == "neededDurability" and v.Value == 150000 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
						gettool()
					end
				end
			end
		end
	end
})

local Toggle = Tabs.AutoFarm:CreateToggle("MythicalGymRock", {
	Title = "Pedra Mítica",
	Description = "",
	Default = false,
	Callback = function(Value)
		selectrock = "Mythical Gym Rock"
		getgenv().autoFarm = Value
		while getgenv().autoFarm do
			task.wait()
			if game:GetService("Players").LocalPlayer.Durability.Value >= 400000 then
				for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
					if v.Name == "neededDurability" and v.Value == 400000 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
						gettool()
					end
				end
			end
		end
	end
})

local Toggle = Tabs.AutoFarm:CreateToggle("EternalGymRock", {
	Title = "Pedra Eterna",
	Description = "",
	Default = false,
	Callback = function(Value)
		selectrock = "Eternal Gym Rock"
		getgenv().autoFarm = Value
		while getgenv().autoFarm do
			task.wait()
			if game:GetService("Players").LocalPlayer.Durability.Value >= 750000 then
				for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
					if v.Name == "neededDurability" and v.Value == 750000 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
						gettool()
					end
				end
			end
		end
	end
})

local Toggle = Tabs.AutoFarm:CreateToggle("LegendGymRock", {
	Title = "Pedra Lendária",
	Description = "",
	Default = false,
	Callback = function(Value)
		selectrock = "Legend Gym Rock"
		getgenv().autoFarm = Value
		while getgenv().autoFarm do
			task.wait()
			if game:GetService("Players").LocalPlayer.Durability.Value >= 1000000 then
				for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
					if v.Name == "neededDurability" and v.Value == 1000000 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
						gettool()
					end
				end
			end
		end
	end
})

local Toggle = Tabs.AutoFarm:CreateToggle("MuscleKingGymRock", {
	Title = "Pedra do Rei",
	Description = "",
	Default = false,
	Callback = function(Value)
		selectrock = "Muscle King Gym Rock"
		getgenv().autoFarm = Value
		while getgenv().autoFarm do
			task.wait()
			if game:GetService("Players").LocalPlayer.Durability.Value >= 5000000 then
				for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
					if v.Name == "neededDurability" and v.Value == 5000000 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
						gettool()
					end
				end
			end
		end
	end
})

local Toggle = Tabs.AutoFarm:CreateToggle("AncientJungleRock", {
	Title = "Pedra da Selva",
	Description = "",
	Default = false,
	Callback = function(Value)
		selectrock = "Ancient Jungle Rock"
		getgenv().autoFarm = Value
		while getgenv().autoFarm do
			task.wait()
			if game:GetService("Players").LocalPlayer.Durability.Value >= 10000000 then
				for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
					if v.Name == "neededDurability" and v.Value == 10000000 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
						gettool()
					end
				end
			end
		end
	end
})

local Section = Tabs.Rebirth:CreateSection("Renascimento")

local targetRebirthValue = 1
local initialRebirths = game.Players.LocalPlayer.leaderstats.Rebirths.Value

local Paragraph = Tabs.Rebirth:CreateParagraph("RebirthStats", {
	Title = "Estatísticas de Renascimento",
	Content = "Carregando estatísticas...",
	TitleAlignment = "Left",
	ContentAlignment = Enum.TextXAlignment.Left
})

local function updateStats()
	local currentRebirths = game.Players.LocalPlayer.leaderstats.Rebirths.Value
	local gained = currentRebirths - initialRebirths
	Paragraph:SetContent(string.format("Renascimento Alvo: %d\nRenascimentos Atuais: %d\nRenascimentos Ganhos: %d", targetRebirthValue, currentRebirths, gained))
end

game.Players.LocalPlayer.leaderstats.Rebirths.Changed:Connect(updateStats)
updateStats()

local targetInput = Tabs.Rebirth:CreateInput("TargetRebirth", {
	Title = "Quantidade Alvo de Renascimento",
	Description = "",
	Default = "1",
	Placeholder = "Digite a quantidade...",
	Numeric = true,
	Finished = true,
	Callback = function(Value)
		targetRebirthValue = tonumber(Value) or 1
		updateStats()
	end
})

local targetRebirthLoop = nil
local targetToggle = Tabs.Rebirth:CreateToggle("AutoRebirthTarget", {
	Title = "Renascimento Automático Alvo",
	Description = "",
	Default = false,
	Callback = function(Value)
		if Value then
			targetRebirthLoop = task.spawn(function()
				while task.wait(0.1) do
					if game.Players.LocalPlayer.leaderstats.Rebirths.Value >= targetRebirthValue then
						targetToggle:SetValue(false)
						break
					end
					game:GetService("ReplicatedStorage").rEvents.rebirthRemote:InvokeServer("rebirthRequest")
				end
			end)
		else
			if targetRebirthLoop then
				task.cancel(targetRebirthLoop)
				targetRebirthLoop = nil
			end
		end
	end
})

local infiniteRebirthLoop = nil
local infiniteToggle = Tabs.Rebirth:CreateToggle("AutoRebirthInfinite", {
	Title = "Renascimento Automático Infinito",
	Description = "",
	Default = false,
	Callback = function(Value)
		if Value then
			infiniteRebirthLoop = task.spawn(function()
				while task.wait(0.1) do
					game:GetService("ReplicatedStorage").rEvents.rebirthRemote:InvokeServer("rebirthRequest")
				end
			end)
		else
			if infiniteRebirthLoop then
				task.cancel(infiniteRebirthLoop)
				infiniteRebirthLoop = nil
			end
		end
	end
})

local autoSizeLoop = nil
local sizeToggle = Tabs.Rebirth:CreateToggle("AutoSize", {
	Title = "Tamanho Automático 1",
	Description = "Define o tamanho do personagem para 1 continuamente",
	Default = false,
	Callback = function(Value)
		if Value then
			autoSizeLoop = task.spawn(function()
				while task.wait(0) do
					game:GetService("ReplicatedStorage").rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", 1)
				end
			end)
		else
			if autoSizeLoop then
				task.cancel(autoSizeLoop)
				autoSizeLoop = nil
			end
		end
	end
})

local teleportLoop = nil
local kingTeleportToggle = Tabs.Rebirth:CreateToggle("KingTeleport", {
	Title = "Teleporte Automático ao Rei",
	Description = "",
	Default = false,
	Callback = function(Value)
		if Value then
			teleportLoop = task.spawn(function()
				while task.wait(0) do
					if game.Players.LocalPlayer.Character then
						game.Players.LocalPlayer.Character:MoveTo(Vector3.new(-8646, 17, -5738))
					end
				end
			end)
		else
			if teleportLoop then
				task.cancel(teleportLoop)
				teleportLoop = nil
			end
		end
	end
})

local Section = Tabs.Killer:CreateSection("Morte Automática")
local Players = game:GetService("Players")
local whitelist = {}

local WhitelistedList = Tabs.Killer:CreateParagraph("WhitelistedPlayers", {
	Title = "Jogadores na Lista Branca",
	Content = "Nenhum",
	TitleAlignment = "Left",
	ContentAlignment = Enum.TextXAlignment.Left
})

local function updateWhitelistDisplay()
	local displayText = ""
	local count = 0
	for name, _ in pairs(whitelist) do
		count = count + 1
		displayText = displayText .. name .. "\n"
	end
	if count == 0 then
		displayText = "Nenhum"
	end
	WhitelistedList:SetContent(displayText)
end

Tabs.Killer:AddToggle("Kill v2 Player", {
	Title = "Começar a Matar",
	Default = false,
	Callback = function(v)
		getgenv().killallv2 = v
		task.spawn(function()
			while getgenv().killallv2 do
				pcall(function()
					for _, player in pairs(Players:GetPlayers()) do
						if player ~= game.Players.LocalPlayer then
							local playerNameLower = player.Name:lower()
							local playerDisplayLower = player.DisplayName:lower()
							if not whitelist[playerNameLower] and not whitelist[playerDisplayLower] then
								if player.Character and player.Character:FindFirstChild("HumanoidRootPart") and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") then
									firetouchinterest(player.Character.HumanoidRootPart, game.Players.LocalPlayer.Character.LeftHand, 0)
									task.wait()
									firetouchinterest(player.Character.HumanoidRootPart, game.Players.LocalPlayer.Character.LeftHand, 1)
									gettool()
								end
							end
						end
					end
				end)
				task.wait(0.1)
			end
		end)
	end
})

local WhitelistInput = Tabs.Killer:CreateInput("WhitelistInput", {
	Title = "Lista Branca",
	Description = "Nome de usuário ou apelido",
	Default = "",
	Placeholder = "Digite aqui...",
	Numeric = false,
	Finished = true,
	Callback = function(Value)
		if Value ~= "" then
			whitelist[Value:lower()] = true
			updateWhitelistDisplay()
			print("Adicionado à lista branca com sucesso: " .. Value)
		end
	end
})

Tabs.Killer:CreateButton{
	Title = "Limpar Lista Branca",
	Callback = function()
		table.clear(whitelist)
		updateWhitelistDisplay()
	end
}

local targetPlayer = ""
local TargetToggle = Tabs.Killer:CreateToggle("KillTargetToggle", {
	Title = "Matar Jogador Alvo",
	Default = false,
	Callback = function(Value)
		getgenv().killTarget = Value
		while getgenv().killTarget do
			wait()
			for _, player in pairs(game.Players:GetPlayers()) do
				if (player.Name:lower() == targetPlayer:lower() or player.DisplayName:lower() == targetPlayer:lower()) and player ~= game.Players.LocalPlayer and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
					if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
						firetouchinterest(player.Character.HumanoidRootPart, game.Players.LocalPlayer.Character.LeftHand, 0)
						firetouchinterest(player.Character.HumanoidRootPart, game.Players.LocalPlayer.Character.LeftHand, 1)
						gettool()
					end
				end
			end
		end
		if not getgenv().killTarget then
			game.Players.LocalPlayer.Character.Humanoid:UnequipTools()
		end
	end
})

local PlayerDropdown = Tabs.Killer:CreateDropdown("PlayerList", {
	Title = "Selecionar Alvo",
	Description = "Escolha o jogador alvo",
	Values = {},
	Multi = false,
	Default = nil,
	Callback = function(Value)
		local username = string.match(Value, "(.+) |")
		targetPlayer = username
		print("Alvo definido para:", targetPlayer)
	end
})

local function updatePlayerList()
	local playerInfo = {}
	for _, player in pairs(Players:GetPlayers()) do
		if player ~= game.Players.LocalPlayer then
			local displayText = player.Name .. " | " .. player.DisplayName
			table.insert(playerInfo, displayText)
		end
	end
	PlayerDropdown:SetValues(playerInfo)
end

Players.PlayerAdded:Connect(updatePlayerList)
Players.PlayerRemoving:Connect(updatePlayerList)
updatePlayerList()

local Dropdown1 = Tabs.Crystals:CreateDropdown("Crystals1", {
	Title = "Selecionar Cristal",
	Description = "",
	Values = {
		"Cristal Azul",
		"Cristal Verde",
		"Cristal de Gelo",
		"Cristal Mítico",
		"Cristal Infernal"
	},
	Multi = false,
	Default = 1,
	Callback = function(Value)
		selectedCrystal1 = Value
	end
})

local Toggle1 = Tabs.Crystals:CreateToggle("AutoOpen1", {
	Title = "Abrir Cristal Automático",
	Description = "",
	Default = false,
	Callback = function(Value)
		_G.AutoOpen1 = Value
		while _G.AutoOpen1 do
			game:GetService("ReplicatedStorage").rEvents.openCrystalRemote:InvokeServer("openCrystal", selectedCrystal1)
			task.wait(1)
		end
	end
})

local selectedCrystal2 = "Cristal Lendário"

local Dropdown2 = Tabs.Crystals:CreateDropdown("Crystals2", {
	Title = "Selecionar Cristal",
	Description = "",
	Values = {
		"Cristal Lendário",
		"Cristal Elite Muscular",
		"Cristal Oráculo Galáctico",
		"Cristal da Selva"
	},
	Multi = false,
	Default = 1,
	Callback = function(Value)
		selectedCrystal2 = Value
	end
})

local Toggle2 = Tabs.Crystals:CreateToggle("AutoOpen2", {
	Title = "Abrir Cristal Automático",
	Description = "",
	Default = false,
	Callback = function(Value)
		_G.AutoOpen2 = Value
		while _G.AutoOpen2 do
			game:GetService("ReplicatedStorage").rEvents.openCrystalRemote:InvokeServer("openCrystal", selectedCrystal2)
			task.wait(1)
		end
	end
})

local selectedPet = ""
local Input1 = Tabs.Crystals:CreateInput("AutoPet", {
	Title = "Pet Automático",
	Description = "Digite o nome do pet",
	Default = "",
	Placeholder = "Digite o Nome do Pet",
	Numeric = false,
	Finished = true,
	Callback = function(Value)
		selectedPet = Value
	end
})

local Toggle1 = Tabs.Crystals:CreateToggle("AutoHatchPet", {
	Title = "Chocar Pet Automático",
	Description = "",
	Default = false,
	Callback = function(Value)
		_G.AutoHatchPet = Value
		while _G.AutoHatchPet and selectedPet ~= "" do
			game:GetService("ReplicatedStorage").cPetShopRemote:InvokeServer(game:GetService("ReplicatedStorage").cPetShopFolder[selectedPet])
			task.wait(1)
		end
	end
})

local selectedAura = ""
local Input2 = Tabs.Crystals:CreateInput("AutoAura", {
	Title = "Aura Automática",
	Description = "Digite o nome da aura",
	Default = "",
	Placeholder = "Digite o Nome da Aura",
	Numeric = false,
	Finished = true,
	Callback = function(Value)
		selectedAura = Value
	end
})

local Toggle2 = Tabs.Crystals:CreateToggle("AutoHatchAura", {
	Title = "Abrir Aura Automática",
	Description = "Abre automaticamente a aura selecionada",
	Default = false,
	Callback = function(Value)
		_G.AutoHatchAura = Value
		while _G.AutoHatchAura and selectedAura ~= "" do
			game:GetService("ReplicatedStorage").cPetShopRemote:InvokeServer(game:GetService("ReplicatedStorage").cPetShopFolder[selectedAura])
			task.wait(1)
		end
	end
})

Tabs.Teleport:CreateButton{
	Title = "Spawn",
	Description = "",
	Callback = function()
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
		humanoidRootPart.CFrame = CFrame.new(2, 8, 115)
	end
}

Tabs.Teleport:CreateButton{
	Title = "Secreto",
	Description = "",
	Callback = function()
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
		humanoidRootPart.CFrame = CFrame.new(1947, 2, 6191)
	end
}

Tabs.Teleport:CreateButton{
	Title = "Diminuto",
	Description = "",
	Callback = function()
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
		humanoidRootPart.CFrame = CFrame.new(-34, 7, 1903)
	end
}

Tabs.Teleport:CreateButton{
	Title = "Congelado",
	Description = "",
	Callback = function()
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
		humanoidRootPart.CFrame = CFrame.new(- 2600.00244, 3.67686558, - 403.884369, 0.0873617008, 1.0482899e-09, 0.99617666, 3.07204253e-08, 1, - 3.7464023e-09, - 0.99617666, 3.09302628e-08, 0.0873617008)
	end
}

Tabs.Teleport:CreateButton{
	Title = "Mítico",
	Description = "",
	Callback = function()
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
		humanoidRootPart.CFrame = CFrame.new(2255, 7, 1071)
	end
}

Tabs.Teleport:CreateButton{
	Title = "Inferno",
	Description = "",
	Callback = function()
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
		humanoidRootPart.CFrame = CFrame.new(-6768, 7, -1287)
	end
}

Tabs.Teleport:CreateButton{
	Title = "Lendário",
	Description = "",
	Callback = function()
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
		humanoidRootPart.CFrame = CFrame.new(4604, 991, -3887)
	end
}

Tabs.Teleport:CreateButton{
	Title = "Rei Musculoso",
	Description = "",
	Callback = function()
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
		humanoidRootPart.CFrame = CFrame.new(-8646, 17, -5738)
	end
}

Tabs.Teleport:CreateButton{
	Title = "Selva",
	Description = "",
	Callback = function()
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
		humanoidRootPart.CFrame = CFrame.new(-8659, 6, 2384)
	end
}

Tabs.Teleport:CreateButton{
	Title = "Arena de Lava",
	Description = "",
	Callback = function()
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
		humanoidRootPart.CFrame = CFrame.new(4471, 119, -8836)
	end
}

Tabs.Teleport:CreateButton{
	Title = "Arena do Deserto",
	Description = "",
	Callback = function()
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
		humanoidRootPart.CFrame = CFrame.new(960, 17, -7398)
	end
}

Tabs.Teleport:CreateButton{
	Title = "Arena da Praia",
	Description = "",
	Callback = function()
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
		humanoidRootPart.CFrame = CFrame.new(-1849, 20, -6335)
	end
}

local IntSection = Tabs.Stats:CreateSection("Estatísticas do Jogador")
local RunService = game:GetService("RunService")
local player = game.Players.LocalPlayer

local function debugPrint(message, value)
	print(string.format("[DEBUG] %s: %s", message, tostring(value)))
end

local strengthGained = 0
local lastStrengthValue = nil
local rebirthsGained = 0
local lastRebirthsValue = nil
local killsGained = 0
local lastKillsValue = nil
local brawlsGained = 0
local lastBrawlsValue = nil
local goodKarmaGained = 0
local lastGoodKarmaValue = nil
local evilKarmaGained = 0
local lastEvilKarmaValue = nil
local durabilityGained = 0
local lastDurabilityValue = nil
local agilityGained = 0
local lastAgilityValue = nil
local muscleKingTimeGained = 0
local lastMuscleKingTimeValue = nil

local LeaderParagraph = Tabs.Stats:CreateParagraph("LeaderStats", {
	Title = "📊 Estatísticas de Liderança",
	Content = "Carregando estatísticas...",
	TitleAlignment = "Left",
	ContentAlignment = Enum.TextXAlignment.Left
})

local IntParagraph = Tabs.Stats:CreateParagraph("IntStats", {
	Title = "💪 Estatísticas do Jogador",
	Content = "Carregando estatísticas...",
	TitleAlignment = "Left",
	ContentAlignment = Enum.TextXAlignment.Left
})

local function formatNumber(number)
	if number >= 1e18 then
		return string.format("%.1fQn", number / 1e18)
	elseif number >= 1e15 then
		return string.format("%.1fQd", number / 1e15)
	elseif number >= 1e12 then
		return string.format("%.1fT", number / 1e12)
	elseif number >= 1e9 then
		return string.format("%.1fB", number / 1e9)
	elseif number >= 1e6 then
		return string.format("%.1fM", number / 1e6)
	elseif number >= 1e3 then
		return string.format("%.1fK", number / 1e3)
	else
		return tostring(number)
	end
end

repeat
	task.wait()
until game:IsLoaded()
debugPrint("Jogo Carregado", "Sucesso")

if not player.Character then
	player.CharacterAdded:Wait()
end
debugPrint("Personagem Carregado", "Sucesso")

repeat
	task.wait()
until player:FindFirstChild("leaderstats") and player:FindFirstChild("goodKarma")
debugPrint("Estatísticas Carregadas", "Sucesso")

RunService.RenderStepped:Connect(function()
	local currentStrength = player.leaderstats.Strength.Value
	local currentRebirths = player.leaderstats.Rebirths.Value
	local currentKills = player.leaderstats.Kills.Value
	local currentBrawls = player.leaderstats.Brawls.Value
	local currentGoodKarma = player.goodKarma.Value
	local currentEvilKarma = player.evilKarma.Value
	local currentDurability = player.Durability.Value
	local currentAgility = player.Agility.Value
	local currentMuscleKingTime = player.muscleKingTime.Value
	if lastStrengthValue then
		if currentStrength > lastStrengthValue then
			strengthGained = strengthGained + (currentStrength - lastStrengthValue)
		end
	end
	lastStrengthValue = currentStrength
	if lastRebirthsValue then
		if currentRebirths > lastRebirthsValue then
			rebirthsGained = rebirthsGained + (currentRebirths - lastRebirthsValue)
		end
	end
	lastRebirthsValue = currentRebirths
	if lastKillsValue then
		if currentKills > lastKillsValue then
			killsGained = killsGained + (currentKills - lastKillsValue)
		end
	end
	lastKillsValue = currentKills
	if lastBrawlsValue then
		if currentBrawls > lastBrawlsValue then
			brawlsGained = brawlsGained + (currentBrawls - lastBrawlsValue)
		end
	end
	lastBrawlsValue = currentBrawls
	if lastGoodKarmaValue then
		if currentGoodKarma > lastGoodKarmaValue then
			goodKarmaGained = goodKarmaGained + (currentGoodKarma - lastGoodKarmaValue)
		end
	end
	lastGoodKarmaValue = currentGoodKarma
	if lastEvilKarmaValue then
		if currentEvilKarma > lastEvilKarmaValue then
			evilKarmaGained = evilKarmaGained + (currentEvilKarma - lastEvilKarmaValue)
		end
	end
	lastEvilKarmaValue = currentEvilKarma
	if lastDurabilityValue then
		if currentDurability > lastDurabilityValue then
			durabilityGained = durabilityGained + (currentDurability - lastDurabilityValue)
		end
	end
	lastDurabilityValue = currentDurability
	if lastAgilityValue then
		if currentAgility > lastAgilityValue then
			agilityGained = agilityGained + (currentAgility - lastAgilityValue)
		end
	end
	lastAgilityValue = currentAgility
	if lastMuscleKingTimeValue then
		if currentMuscleKingTime > lastMuscleKingTimeValue then
			muscleKingTimeGained = muscleKingTimeGained + (currentMuscleKingTime - lastMuscleKingTimeValue)
		end
	end
	lastMuscleKingTimeValue = currentMuscleKingTime
	LeaderParagraph:SetContent(string.format("Força: %s     Força Ganha: %s\nRenascimentos: %s     Renascimentos Ganhos: %s\nAbates: %s     Abates Ganhos: %s\nLutas: %s     Lutas Ganhas: %s", formatNumber(currentStrength), formatNumber(strengthGained), formatNumber(currentRebirths), formatNumber(rebirthsGained), formatNumber(currentKills), formatNumber(killsGained), formatNumber(currentBrawls), formatNumber(brawlsGained)))
	IntParagraph:SetContent(string.format("Karma Bom: %s     Ganho: %s\nKarma Mal: %s     Ganho: %s\nDurabilidade: %s     Ganho: %s\nAgilidade: %s     Ganho: %s\nTempo como Rei Musculoso: %s     Ganho: %s", formatNumber(currentGoodKarma), formatNumber(goodKarmaGained), formatNumber(currentEvilKarma), formatNumber(evilKarmaGained), formatNumber(currentDurability), formatNumber(durabilityGained), formatNumber(currentAgility), formatNumber(agilityGained), formatNumber(currentMuscleKingTime), formatNumber(muscleKingTimeGained)))
end)

local Toggle = Tabs.Misc:CreateToggle("Reconectar", {
	Title = "Reconectar Automaticamente",
	Description = "",
	Default = false,
	Callback = function(Value)
		_G.AutoRejoin = Value
		while _G.AutoRejoin do
			if game:GetService("CoreGui").RobloxPromptGui.promptOverlay:FindFirstChild("ErrorPrompt") then
				game:GetService("TeleportService"):Teleport(game.PlaceId, game:GetService("Players").LocalPlayer)
			end
			task.wait(1)
		end
	end
})

Tabs.Misc:CreateButton{
	Title = "Otimizar FPS",
	Description = "",
	Callback = function()
		for _, v in pairs(game:GetDescendants()) do
			if v:IsA("ParticleEmitter") or v:IsA("Trail") or v:IsA("Smoke") or v:IsA("Fire") or v:IsA("Sparkles") then
				v.Enabled = false
			end
		end
		local lighting = game:GetService("Lighting")
		lighting.GlobalShadows = false
		lighting.FogEnd = 9e9
		for _, v in pairs(workspace:GetDescendants()) do
			if v:IsA("BasePart") and not v.Parent:FindFirstChild("Humanoid") then
				v.Material = Enum.Material.SmoothPlastic
				if v:IsA("Texture") then
					v:Destroy()
				end
			end
		end
		settings().Rendering.QualityLevel = 1
	end
}

Tabs.Misc:CreateButton{
	Title = "Reconectar",
	Description = "",
	Callback = function()
		game:GetService("TeleportService"):Teleport(game.PlaceId, game:GetService("Players").LocalPlayer)
	end
}

Tabs.Misc:CreateButton{
	Title = "Trocar Servidor",
	Description = "",
	Callback = function()
		local PlaceID = game.PlaceId
		local AllIDs = {}
		local foundAnything = ""
		local actualHour = os.date("!*t").hour
		local Deleted = false
		local function TPReturner()
			local Site;
			if foundAnything == "" then
				Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
			else
				Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
			end
			local ID = ""
			if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
				foundAnything = Site.nextPageCursor
			end
			local num = 0;
			for i, v in pairs(Site.data) do
				local Possible = true
				ID = tostring(v.id)
				if tonumber(v.maxPlayers) > tonumber(v.playing) then
					for _, Existing in pairs(AllIDs) do
						if num ~= 0 then
							if ID == tostring(Existing) then
								Possible = false
							end
						else
							if tonumber(actualHour) ~= tonumber(Existing) then
								local delFile = pcall(function()
									AllIDs = {}
									table.insert(AllIDs, actualHour)
								end)
							end
						end
						num = num + 1
					end
					if Possible == true then
						table.insert(AllIDs, ID)
						task.wait()
						pcall(function()
							game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
						end)
						task.wait(4)
					end
				end
			end
		end
		TPReturner()
	end
}

Tabs.Misc:CreateButton{
	Title = "Entrar em Servidor Pequeno",
	Description = "",
	Callback = function()
		local PlaceID = game.PlaceId
		local function GetSmallServer()
			local AllServers = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
			local LowestPlayers = math.huge
			local ServerID
			for _, server in pairs(AllServers.data) do
				if server.playing < LowestPlayers and server.playing > 0 then
					LowestPlayers = server.playing
					ServerID = server.id
				end
			end
			if ServerID then
				game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ServerID, game.Players.LocalPlayer)
			end
		end
		GetSmallServer()
	end
}

Window:SelectTab(1)

Library:Notify{
	Title = "Script MCL Clan!",
	Content = "Por Masterboy123",
	Duration = 3
}

SaveManager:LoadAutoloadConfig()

local TrackingParagraph = Tabs.Stats:CreateParagraph("TrackingStats", {
	Title = "Estatísticas de Rastreamento",
	Content = "Nenhum jogador selecionado",
	TitleAlignment = "Left",
	ContentAlignment = Enum.TextXAlignment.Left
})

local PlayerInput = Tabs.Stats:CreateInput("PlayerTracker", {
	Title = "Rastrear Estatísticas do Jogador",
	Description = "Digite o nome de usuário ou apelido",
	Default = "",
	Placeholder = "Digite o nome do jogador...",
	Numeric = false,
	Finished = true,
	Callback = function(Value)
		targetPlayer = Value
	end
})

local TrackingParagraph = Tabs.Stats:CreateParagraph("TrackingStats", {
	Title = "Estatísticas de Rastreamento",
	Content = "Nenhum jogador selecionado",
	TitleAlignment = "Left",
	ContentAlignment = Enum.TextXAlignment.Left
})

local PlayerInput = Tabs.Stats:CreateInput("PlayerTracker", {
	Title = "Rastrear Estatísticas do Jogador",
	Description = "Digite o nome de usuário ou apelido",
	Default = "",
	Placeholder = "Digite o nome do jogador...",
	Numeric = false,
	Finished = true,
	Callback = function(Value)
		targetPlayer = Value
	end
})

Tabs.Stats:CreateButton{
	Title = "Rastrear Jogador",
	Description = "",
	Callback = function()
		local foundPlayer = nil
		for _, player in pairs(game.Players:GetPlayers()) do
			local nameLower = player.Name:lower()
			local displayLower = player.DisplayName:lower()
			local searchLower = targetPlayer:lower()
			if nameLower:find(searchLower) or displayLower:find(searchLower) then
				foundPlayer = player
				break
			end
		end
		if foundPlayer then
			local content = string.format("Strength: %s\nRebirths: %s\nKills: %s\nBrawls: %s\nGood Karma: %s\nEvil Karma: %s\nDurability: %s\nAgility: %s", formatNumber(foundPlayer.leaderstats.Strength.Value), formatNumber(foundPlayer.leaderstats.Rebirths.Value), formatNumber(foundPlayer.leaderstats.Kills.Value), formatNumber(foundPlayer.leaderstats.Brawls.Value), formatNumber(foundPlayer.goodKarma.Value), formatNumber(foundPlayer.evilKarma.Value), formatNumber(foundPlayer.Durability.Value), formatNumber(foundPlayer.Agility.Value))
			TrackingParagraph:SetContent(content)
			TrackingParagraph:SetTitle("📊 Tracking: " .. foundPlayer.Name)
		end
	end
}

local Toggle = Tabs.Settings:CreateToggle("ToggleName", {
	Title = "Travar Posição",
	Description = "Isso congela sua posição",
	Default = false,
	Callback = function(Value)
		if Value then
			local currentPos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
			getgenv().posLock = game:GetService("RunService").Heartbeat:Connect(function()
				if game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
					game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = currentPos
				end
			end)
		else
			if getgenv().posLock then
				getgenv().posLock:Disconnect()
			end
		end
	end
})

local Toggle = Tabs.Settings:CreateToggle("NoClip", {
	Title = "Atravessar Paredes",
	Description = "Permite atravessar qualquer coisa",
	Default = false,
	Callback = function(Value)
		local RunService = game:GetService("RunService")
		local Players = game:GetService("Players")
		local LocalPlayer = Players.LocalPlayer
		if Value then
			getgenv().noclipConnection = RunService.Stepped:Connect(function()
				for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
					if part:IsA("BasePart") then
						part.CanCollide = false
					end
				end
			end)
		else
			if getgenv().noclipConnection then
				getgenv().noclipConnection:Disconnect()
			end
		end
	end
})

local Toggle = Tabs.Settings:CreateToggle("InfiniteJump", {
	Title = "Pulo Infinito",
	Description = "",
	Default = false,
	Callback = function(Value)
		_G.InfiniteJump = Value
		local Player = game:GetService('Players').LocalPlayer
		local UserInputService = game:GetService('UserInputService')
		UserInputService.JumpRequest:Connect(function()
			if _G.InfiniteJump then
				Player.Character:FindFirstChildOfClass('Humanoid'):ChangeState('Jumping')
			end
		end)
	end
})

local Toggle = Tabs.Settings:CreateToggle("BackgroundMusic", {
	Title = "Música de Fundo",
	Description = "",
	Default = false,
	Callback = function(Value)
		if Value then
			local sound = Instance.new("Sound")
			sound.Name = "BackgroundMusic"
			sound.SoundId = "rbxassetid://5410083226"
			sound.Volume = 1
			sound.Looped = true
			sound.Parent = game.Workspace
			sound:Play()
		else
			if game.Workspace:FindFirstChild("BackgroundMusic") then
				game.Workspace.BackgroundMusic:Destroy()
			end
		end
	end
})
local Dropdown = Tabs.Settings:CreateDropdown("TimeControl", {
	Title = "Controle de Tempo",
	Description = "",
	Values = {
		"Manhã",
		"Dia",
		"Noite"
	},
	Multi = false,
	Default = "Manhã",
	Callback = function(Value)
		local times = {
			["Manhã"] = 7,
			["Dia"] = 14,
			["Noite"] = 0
		}
		game:GetService("Lighting").ClockTime = times[Value]
	end
})

local Button = Tabs.Settings:CreateButton({
	Title = "Carregar Infinite Yield",
	Description = "",
	Callback = function()
		loadstring(game:HttpGet('https://raw.githubusercontent.com/edgeiy/infiniteyield/master/source'))()
		Library:Notify({
			Title = "Script Loaded",
			Content = "Infinite Yield is now running",
			Duration = 3
		})
	end
})

local Toggle = Tabs.Settings:CreateToggle("SmartWorkout", {
	Title = "Fazenda de Ovos Automática (ótimo com renascimento)",
	Description = "",
	Default = false,
	Callback = function(Value)
		if Value then
			getgenv().lift = true
			local function findMachine(machineName)
				local machine = workspace.machinesFolder:FindFirstChild(machineName)
				if not machine then
					for _, folder in pairs(workspace:GetChildren()) do
						if folder:IsA("Folder") and folder.Name:find("machines") then
							machine = folder:FindFirstChild(machineName)
							if machine then
								break
							end
						end
					end
				end
				return machine
			end
			local function pressE()
				local vim = game:GetService("VirtualInputManager")
				vim:SendKeyEvent(true, "E", false, game)
				task.wait(0.1)
				vim:SendKeyEvent(false, "E", false, game)
			end
			local function useOneEgg()
				local protein = game.Players.LocalPlayer.Backpack:FindFirstChild("Protein Egg")
				if protein then
					protein.Parent = game.Players.LocalPlayer.Character
					task.wait(0.1)
					local virtualInput = game:GetService("VirtualInputManager")
					virtualInput:SendMouseButtonEvent(0, 0, 0, true, game, 1)
					task.wait(0.5)
					virtualInput:SendMouseButtonEvent(0, 0, 0, false, game, 1)
				end
			end
			local boostFolder = game.Players.LocalPlayer:FindFirstChild("boostTimersFolder")
			local eggTimer = boostFolder and boostFolder:FindFirstChild("Protein Egg")
			if not eggTimer or (eggTimer and eggTimer.Value < 25) then
				useOneEgg()
			end
			task.spawn(function()
				while getgenv().lift do
					local boostFolder = game.Players.LocalPlayer:FindFirstChild("boostTimersFolder")
					local eggTimer = boostFolder and boostFolder:FindFirstChild("Protein Egg")
					if eggTimer then
						local timeLeft = tonumber(eggTimer.Value)
						if timeLeft == 25 then
							useOneEgg()
						end
					end
					local machine = findMachine("Jungle Bar Lift")
					if machine and machine:FindFirstChild("interactSeat") then
						local character = game.Players.LocalPlayer.Character
						if character and character:FindFirstChild("HumanoidRootPart") then
							character.HumanoidRootPart.CFrame = machine.interactSeat.CFrame * CFrame.new(0, 3, 0)
							task.wait(0.5)
							pressE()
							game:GetService("Players").LocalPlayer.muscleEvent:FireServer("rep", machine.interactSeat)
						end
					end
					task.wait(0.1)
				end
			end)
		else
			getgenv().lift = false
		end
	end
})

local Toggle = Tabs.Settings:CreateToggle("FrameToggle", {
	Title = "Ocultar Todos os Frames",
	Description = "",
	Default = false,
	Callback = function(Value)
		local rSto = game:GetService("ReplicatedStorage")
		for _, obj in pairs(rSto:GetChildren()) do
			if obj.Name:match("Frame$") then
				obj.Visible = not Value
			end
		end
	end
})

local Input = Tabs.Killer:CreateInput("SpectatePlayer", {
	Title = "Observar Jogador",
	Description = "",
	Default = "",
	Placeholder = "Nome do jogador...",
	Numeric = false,
	Finished = true,
	Callback = function(Value)
		local Players = game:GetService("Players")
		local targetPlayer
		targetPlayer = Players:FindFirstChild(Value)
		if not targetPlayer then
			for _, player in pairs(Players:GetPlayers()) do
				if player.DisplayName:lower() == Value:lower() then
					targetPlayer = player
					break
				end
			end
		end
		if targetPlayer and targetPlayer.Character then
			local camera = workspace.CurrentCamera
			camera.CameraSubject = targetPlayer.Character.Humanoid
			print("Now spectating: " .. targetPlayer.DisplayName .. " (@" .. targetPlayer.Name .. ")")
		else
			print("")
		end
	end
})

Tabs.Killer:CreateButton{
	Title = "Parar de Observar",
	Description = "Voltar câmera para seu personagem",
	Callback = function()
		local Players = game:GetService("Players")
		local camera = workspace.CurrentCamera
		camera.CameraSubject = Players.LocalPlayer.Character.Humanoid
		print("")
	end
}
